rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Règles pour emailSettings
    match /emailSettings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Règles pour emails
    match /emails/{emailId} {
      allow read, write: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        (request.method == 'create' && isOwner(request.resource.data.userId))
      );
    }

    // Règles pour events
    match /events/{eventId} {
      allow read, write: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        (request.method == 'create' && isOwner(request.resource.data.userId))
      );
    }

    // Règles pour contacts
    match /contacts/{contactId} {
      allow read, write: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        (request.method == 'create' && isOwner(request.resource.data.userId))
      );
    }

    // Règle par défaut - refuser tout accès non autorisé
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 